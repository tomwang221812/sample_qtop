#!/bin/bash

export VERBOSE=1
source ./simple_curses.sh

which adb

export HEXAGON_ROOT=$HOME/Qualcomm/Hexagon_SDK/4.5.0.3
export MINIDM_PATH=${HEXAGON_ROOT}/tools/debug/mini-dm/Ubuntu18/mini-dm
export DEVICE_SERIAL=''

export target_cpu_debug_path='/sys/devices/system/cpu'
export use_minidm=false

export seed=$(echo $RANDOM | md5sum | head -c 20; echo | tr -d '\r\n')

function init() {
    clear
    echo '(II) Checking Hexagon root folder'
    if [ -d "$HEXAGON_ROOT" ];
    then
        echo "(II) $HEXAGON_ROOT directory exists."
    else
	    echo "(EE) $HEXAGON_ROOT directory does not exist."
        exit
    fi

    get_adb_device_as_options
    get_minidm_device_as_options

    echo '(**) Mount debug partition'
    adb -s ${DEVICE_SERIAL} wait-for-device root
    adb -s ${DEVICE_SERIAL} wait-for-device remount
    adb -s ${DEVICE_SERIAL} wait-for-device root
    adb -s ${DEVICE_SERIAL} shell mount -t debugfs none /sys/kernel/debug
    echo '(**) Debug mounted...'

    get_adb_devices
    get_qrb5165_cpu_clk_max
    get_qrb5165_cpu_clk_min
    get_cpu_load_init
    get_qrb5165_gpu_clk_max
    get_qrb5165_gpu_clk_min
    get_system_info

    if [ "$use_minidm" = true ] ; 
    then 
        get_minidm_devices
    fi

    # Init values and files
    get_adb_devices &
    get_qrb5165_cpu_clk
    get_qrb5165_cdsp_clk 
    get_qrb5165_npu_clk 
    get_qrb5165_gpu_clk
    get_qrb5165_vpu_clk 
    get_disk_usage 
    get_network_info 
    get_logcat_last_lines &
    get_top_process 1 5
    get_uptime 

    if [ "$use_minidm" = true ] ; 
    then 
        get_minidm_logs &
    fi

}

function get_adb_device_as_options() {
    echo ""
    echo "Choose which ADB device you want to connect"
    adb_device_no=1
    echo ""
    for line in $(adb devices | tail -n +2 | sed 's/\tdevice//g' | head --lines=-1); 
        do echo $((adb_device_no++))\) $line; 
    done
    echo "Q) Close the program"
    echo ""
    read -p ">>> Enter which device you want to connect [default=1]: " DEVICE_SERIAL
    
    if [ -z $DEVICE_SERIAL ]
    then
        DEVICE_SERIAL=1
    fi

    if [ $DEVICE_SERIAL = "Q" ] || [ $DEVICE_SERIAL = "q" ]
    then
        exit
    fi

    # Manually
    if [ $DEVICE_SERIAL -ge $adb_device_no ] || [ $DEVICE_SERIAL -lt 1 ]
    then
        echo You choose $DEVICE_SERIAL which is not in options...
        read -p ">>> Enter the serial manulally (Try [serial] or [ip]:[port]): " DEVICE_SERIAL
        return
    fi

    # OKay
    adb_device_no=1
    for line in $(adb devices | tail -n +2 | sed 's/\tdevice//g' | head --lines=-1); 
    do 
        if [ $DEVICE_SERIAL -eq $((adb_device_no++)) ]
        then
            echo "(II) You choose $DEVICE_SERIAL which is $line"
            export DEVICE_SERIAL=$line
            return
        fi
    done
}

function get_minidm_device_as_options() {

    if [[ $($MINIDM_PATH --devices | tail -n +4 | tr -d " " | tr -d '\r\n') ]];
    then
        echo '(II) Init mini-dm...'
        use_minidm=true
    else
        echo '(!!) No USB device connect to host'
        echo '(!!) mini-dm disabled!'
        return
    fi

    echo ""
    echo "Choose which mini-dm device you want to connect"
    minidm_device_no=1
    echo ""
    for line in $($MINIDM_PATH --devices | tail -n +4 | tr -d " "); 
    do 
        echo $((minidm_device_no++))\) ${line#*USBPort:}
    done
    echo "N) Do not use mini-dm"
    echo ""
    read -p ">>> Enter which device you want to connect [default=1]: " minidm_usbport
    
    if [ -z $minidm_usbport ]
    then
        minidm_usbport=1
    fi

    if [ $minidm_usbport = "N" ] || [ $minidm_usbport = "n" ]
    then
        use_minidm=false
        return
    fi

    # Manually
    if [ $minidm_usbport -ge $minidm_device_no ] || [ $minidm_usbport -lt 1 ]
    then
        echo "(II) You choose $minidm_usbport which is not in options..."
        read -p ">>> Enter the usbport manulally (Try [usbport no]]): " DEVICE_SERIAL
        return
    fi

    # OKay
    minidm_device_no=1
    for line in $($MINIDM_PATH --devices | tail -n +4 | tr -d " "); 
    do 
        if [ $minidm_usbport -eq $((minidm_device_no++)) ]
        then
            echo You choose $DEVICE_SERIAL which is $line
            export minidm_usbport=${line#*USBPort:}
            return
        fi
    done
}

function get_adb_devices() {
    adb devices | tail -n +2 | tr -d '\tdevices' | head --lines=-1 > "/dev/shm/${seed}_adb_devices.log"
}

function get_minidm_devices() {
    $MINIDM_PATH --devices | tail -n +4 > /dev/shm/sample_qtop_minidm_devices_$seed.log
    $MINIDM_PATH --usbport $minidm_usbport --msg-file /dev/shm/sample_qtop_minidm_$seed.log --filter_in "CDSP" > /dev/shm/sample_qtop_minidm_status_$seed.log &
}
trap 'trap - SIGTERM && kill 0' SIGINT SIGTERM EXIT

function get_minidm_logs() {
    lines=5
    tail -n$lines /dev/shm/sample_qtop_minidm_$seed.log > /dev/shm/sample_qtop_minidm_log_lines_$seed.log
}

function get_cpu_load_init() {
    adb -s ${DEVICE_SERIAL} shell cat /proc/stat | grep 'cpu ' | awk '{printf "%d:%d:%d:%d:%d:%d:%d:%d:%d:%d", $2, $3, $4, $5, $6, $7, $8, $9, $10, $11}' > "/dev/shm/${seed}_cpu_prevload"
    adb -s ${DEVICE_SERIAL} shell cat /proc/stat | grep 'cpu7' | awk '{printf "%d:%d:%d:%d:%d:%d:%d:%d:%d:%d", $2, $3, $4, $5, $6, $7, $8, $9, $10, $11}' > "/dev/shm/${seed}_cpu7_prevload"
    adb -s ${DEVICE_SERIAL} shell cat /proc/stat | grep 'cpu4' | awk '{printf "%d:%d:%d:%d:%d:%d:%d:%d:%d:%d", $2, $3, $4, $5, $6, $7, $8, $9, $10, $11}' > "/dev/shm/${seed}_cpu4_prevload"
    adb -s ${DEVICE_SERIAL} shell cat /proc/stat | grep 'cpu5' | awk '{printf "%d:%d:%d:%d:%d:%d:%d:%d:%d:%d", $2, $3, $4, $5, $6, $7, $8, $9, $10, $11}' > "/dev/shm/${seed}_cpu5_prevload"
    adb -s ${DEVICE_SERIAL} shell cat /proc/stat | grep 'cpu6' | awk '{printf "%d:%d:%d:%d:%d:%d:%d:%d:%d:%d", $2, $3, $4, $5, $6, $7, $8, $9, $10, $11}' > "/dev/shm/${seed}_cpu6_prevload"
    adb -s ${DEVICE_SERIAL} shell cat /proc/stat | grep 'cpu0' | awk '{printf "%d:%d:%d:%d:%d:%d:%d:%d:%d:%d", $2, $3, $4, $5, $6, $7, $8, $9, $10, $11}' > "/dev/shm/${seed}_cpu0_prevload"
    adb -s ${DEVICE_SERIAL} shell cat /proc/stat | grep 'cpu1' | awk '{printf "%d:%d:%d:%d:%d:%d:%d:%d:%d:%d", $2, $3, $4, $5, $6, $7, $8, $9, $10, $11}' > "/dev/shm/${seed}_cpu1_prevload"
    adb -s ${DEVICE_SERIAL} shell cat /proc/stat | grep 'cpu2' | awk '{printf "%d:%d:%d:%d:%d:%d:%d:%d:%d:%d", $2, $3, $4, $5, $6, $7, $8, $9, $10, $11}' > "/dev/shm/${seed}_cpu2_prevload"
    adb -s ${DEVICE_SERIAL} shell cat /proc/stat | grep 'cpu3' | awk '{printf "%d:%d:%d:%d:%d:%d:%d:%d:%d:%d", $2, $3, $4, $5, $6, $7, $8, $9, $10, $11}' > "/dev/shm/${seed}_cpu3_prevload"
}

function get_qrb5165_cpu_clk_max() {

    scale=2
    pre=1000000

    # Kyro 585 Prime @ 2.84GHz
    adb -s ${DEVICE_SERIAL} shell cat ${target_cpu_debug_path}/cpu7/cpufreq/scaling_max_freq | tr -d '\r\n' > "/dev/shm/${seed}_cpu7_clk_max"
    echo $(bc <<< "scale=$scale; $(< "/dev/shm/${seed}_cpu7_clk_max") / $pre") > "/dev/shm/${seed}_cpu7_clk_max_f"

    # Kyro 585 Gold @ 2.42GHz
    adb -s ${DEVICE_SERIAL} shell cat ${target_cpu_debug_path}/cpu4/cpufreq/scaling_max_freq | tr -d '\r\n' > "/dev/shm/${seed}_cpu4_clk_max"
    echo $(bc <<< "scale=$scale; $(< "/dev/shm/${seed}_cpu4_clk_max") / $pre") > "/dev/shm/${seed}_cpu4_clk_max_f"

    adb -s ${DEVICE_SERIAL} shell cat ${target_cpu_debug_path}/cpu5/cpufreq/scaling_max_freq | tr -d '\r\n' > "/dev/shm/${seed}_cpu5_clk_max"
    echo $(bc <<< "scale=$scale; $(< "/dev/shm/${seed}_cpu5_clk_max") / $pre") > "/dev/shm/${seed}_cpu5_clk_max_f"

    adb -s ${DEVICE_SERIAL} shell cat ${target_cpu_debug_path}/cpu6/cpufreq/scaling_max_freq | tr -d '\r\n' > "/dev/shm/${seed}_cpu6_clk_max"
    echo $(bc <<< "scale=$scale; $(< "/dev/shm/${seed}_cpu6_clk_max") / $pre") > "/dev/shm/${seed}_cpu6_clk_max_f"

    # Kyro 585 Silver @ 1.80GHz
    adb -s ${DEVICE_SERIAL} shell cat ${target_cpu_debug_path}/cpu0/cpufreq/scaling_max_freq | tr -d '\r\n' > "/dev/shm/${seed}_cpu0_clk_max"
    echo $(bc <<< "scale=$scale; $(< "/dev/shm/${seed}_cpu0_clk_max") / $pre") > "/dev/shm/${seed}_cpu0_clk_max_f"

    adb -s ${DEVICE_SERIAL} shell cat ${target_cpu_debug_path}/cpu1/cpufreq/scaling_max_freq | tr -d '\r\n' > "/dev/shm/${seed}_cpu1_clk_max"
    echo $(bc <<< "scale=$scale; $(< "/dev/shm/${seed}_cpu1_clk_max") / $pre") > "/dev/shm/${seed}_cpu1_clk_max_f"

    adb -s ${DEVICE_SERIAL} shell cat ${target_cpu_debug_path}/cpu2/cpufreq/scaling_max_freq | tr -d '\r\n' > "/dev/shm/${seed}_cpu2_clk_max"
    echo $(bc <<< "scale=$scale; $(< "/dev/shm/${seed}_cpu2_clk_max") / $pre") > "/dev/shm/${seed}_cpu2_clk_max_f"

    adb -s ${DEVICE_SERIAL} shell cat ${target_cpu_debug_path}/cpu3/cpufreq/scaling_max_freq | tr -d '\r\n' > "/dev/shm/${seed}_cpu3_clk_max"
    echo $(bc <<< "scale=$scale; $(< "/dev/shm/${seed}_cpu3_clk_max") / $pre") > "/dev/shm/${seed}_cpu3_clk_max_f"

}

function get_qrb5165_cpu_clk_min() {

    scale=2
    pre=1000000

    # Kyro 585 Prime @ 2.84GHz
    adb -s ${DEVICE_SERIAL} shell cat ${target_cpu_debug_path}/cpu7/cpufreq/scaling_min_freq | tr -d '\r\n' > "/dev/shm/${seed}_cpu7_clk_min"
    echo $(bc <<< "scale=$scale; $(< "/dev/shm/${seed}_cpu7_clk_min") / $pre") > "/dev/shm/${seed}_cpu7_clk_min_f"

    # Kyro 585 Gold @ 2.42GHz
    adb -s ${DEVICE_SERIAL} shell cat ${target_cpu_debug_path}/cpu4/cpufreq/scaling_min_freq | tr -d '\r\n' > "/dev/shm/${seed}_cpu4_clk_min"
    echo $(bc <<< "scale=$scale; $(< "/dev/shm/${seed}_cpu4_clk_min") / $pre") > "/dev/shm/${seed}_cpu4_clk_min_f"
    adb -s ${DEVICE_SERIAL} shell cat ${target_cpu_debug_path}/cpu5/cpufreq/scaling_min_freq | tr -d '\r\n' > "/dev/shm/${seed}_cpu5_clk_min"
    echo $(bc <<< "scale=$scale; $(< "/dev/shm/${seed}_cpu5_clk_min") / $pre") > "/dev/shm/${seed}_cpu5_clk_min_f"
    adb -s ${DEVICE_SERIAL} shell cat ${target_cpu_debug_path}/cpu6/cpufreq/scaling_min_freq | tr -d '\r\n' > "/dev/shm/${seed}_cpu6_clk_min"
    echo $(bc <<< "scale=$scale; $(< "/dev/shm/${seed}_cpu6_clk_min") / $pre") > "/dev/shm/${seed}_cpu6_clk_min_f"

    # Kyro 585 Silver @ 1.80GHz
    adb -s ${DEVICE_SERIAL} shell cat ${target_cpu_debug_path}/cpu0/cpufreq/scaling_min_freq | tr -d '\r\n' > "/dev/shm/${seed}_cpu0_clk_min"
    echo $(bc <<< "scale=$scale; $(< "/dev/shm/${seed}_cpu0_clk_min") / $pre") > "/dev/shm/${seed}_cpu0_clk_min_f"
    adb -s ${DEVICE_SERIAL} shell cat ${target_cpu_debug_path}/cpu1/cpufreq/scaling_min_freq | tr -d '\r\n' > "/dev/shm/${seed}_cpu1_clk_min"
    echo $(bc <<< "scale=$scale; $(< "/dev/shm/${seed}_cpu1_clk_min") / $pre") > "/dev/shm/${seed}_cpu1_clk_min_f"
    adb -s ${DEVICE_SERIAL} shell cat ${target_cpu_debug_path}/cpu2/cpufreq/scaling_min_freq | tr -d '\r\n' > "/dev/shm/${seed}_cpu2_clk_min"
    echo $(bc <<< "scale=$scale; $(< "/dev/shm/${seed}_cpu2_clk_min") / $pre") > "/dev/shm/${seed}_cpu2_clk_min_f"
    adb -s ${DEVICE_SERIAL} shell cat ${target_cpu_debug_path}/cpu3/cpufreq/scaling_min_freq | tr -d '\r\n' > "/dev/shm/${seed}_cpu3_clk_min"
    echo $(bc <<< "scale=$scale; $(< "/dev/shm/${seed}_cpu3_clk_min") / $pre") > "/dev/shm/${seed}_cpu3_clk_min_f"

}

function get_qrb5165_gpu_clk_max() {

    scale=2
    pre=1000000

    adb -s ${DEVICE_SERIAL} shell cat /sys/class/kgsl/kgsl-3d0/max_gpuclk | tr -d '\r\n' > "/dev/shm/${seed}_gpu_clk_max"
    echo $(bc <<< "scale=$scale; $(< "/dev/shm/${seed}_gpu_clk_max") / $pre") > "/dev/shm/${seed}_gpu_clk_max_f"
}

function get_qrb5165_gpu_clk_min() {
    adb -s ${DEVICE_SERIAL} shell cat /sys/class/kgsl/kgsl-3d0/min_clock_mhz | tr -d '\r\n' > "/dev/shm/${seed}_gpu_clk_min"
}

function get_cpu_load() {
    # $1: cpu name
    # $2: previous var file
    # $3: current var file

    #     $1,   $2,   $3,     $4,   $5,     $6,  $7,       $8,          $9,   $10, $11
    # cpu{n}, user, nice, system, idle, iowait, irq, soft_irq, stealstolen, guest, guest_nice
    #           $2 +   $3 +      $4 +  $7 +       +8  +    $5 +     $6  +           $9 +   $10
    # Total = user + nice + (system + irq + soft_irq) + (idle + iowait) + (stealstolen + guest)
    # Load  = (user + system + nice + stealstolen + guest) / Total * 100.
    # Usage = Current_Load - Prev_Load

    curr_load=$(adb -s ${DEVICE_SERIAL} shell cat /proc/stat | grep "$1" | awk '{printf "%d:%d:%d:%d:%d:%d:%d:%d:%d:%d", $2, $3, $4, $5, $6, $7, $8, $9, $10, $11}')

    IFS=':' read -r user nice system idle iowait irq soft_irq stealstolen guest guest_nice <<< $curr_load
    IFS=':' read -r puser pnice psystem pidle piowait pirq psoft_irq pstealstolen pguest pguest_nice <<< $(< $2)
    
    curr_total=$(echo "$user+$nice+$system+$idle+$iowait+$irq+$soft_irq+$stealstolen+$guest" | bc)
    prev_total=$(echo "$puser+$pnice+$psystem+$pidle+$piowait+$pirq+$psoft_irq+$pstealstolen+$pguest" | bc)
    curr_use=$(echo "$user+$nice+$system+$irq+$soft_irq+$stealstolen+$guest" | bc)
    prev_use=$(echo "$puser+$pnice+$psystem+$pirq+$psoft_irq+$pstealstolen+$pguest" | bc)

    result=$(echo "scale=6; ($curr_use-$prev_use)/($curr_total-$prev_total)*100." | bc)

    echo $curr_load > $2
    echo $result > $3

}

function get_qrb5165_cpu_clk() {
    scale=2
    pre=1000000

    # CPUSS
    adb -s ${DEVICE_SERIAL} shell cat /sys/class/thermal/thermal_zone6/temp | awk '{ printf "%.1f°C", ($1 / 1000) }' > "/dev/shm/${seed}_cpu_temp"
    get_cpu_load 'cpu ' "/dev/shm/${seed}_cpu_prevload" "/dev/shm/${seed}_cpu_load"

    # Kyro 585 Prime @ 2.84GHz
    adb -s ${DEVICE_SERIAL} shell cat ${target_cpu_debug_path}/cpu7/cpufreq/scaling_cur_freq | tr -d '\r\n' > "/dev/shm/${seed}_cpu7_clk"
    echo $(bc <<< "scale=$scale; $(< /dev/shm/${seed}_cpu7_clk) / $pre") > "/dev/shm/${seed}_cpu7_clk_f"
    adb -s ${DEVICE_SERIAL} shell cat /sys/class/thermal/thermal_zone7/temp | awk '{ printf "%.1f°C", ($1 / 1000) }' > "/dev/shm/${seed}_cpu7_temp"
    get_cpu_load 'cpu7' "/dev/shm/${seed}_cpu7_prevload" "/dev/shm/${seed}_cpu7_load"

    # Kyro 585 Gold @ 2.42GHz
    adb -s ${DEVICE_SERIAL} shell cat ${target_cpu_debug_path}/cpu4/cpufreq/scaling_cur_freq | tr -d '\r\n' > "/dev/shm/${seed}_cpu4_clk"
    echo $(bc <<< "scale=$scale; $(< /dev/shm/${seed}_cpu4_clk) / $pre") > "/dev/shm/${seed}_cpu4_clk_f"
    adb -s ${DEVICE_SERIAL} shell cat /sys/class/thermal/thermal_zone8/temp | awk '{ printf "%.1f°C", ($1 / 1000) }' > "/dev/shm/${seed}_cpu4_temp"
    get_cpu_load 'cpu4' "/dev/shm/${seed}_cpu4_prevload" "/dev/shm/${seed}_cpu4_load"

    adb -s ${DEVICE_SERIAL} shell cat ${target_cpu_debug_path}/cpu5/cpufreq/scaling_cur_freq | tr -d '\r\n' > "/dev/shm/${seed}_cpu5_clk"
    echo $(bc <<< "scale=$scale; $(< /dev/shm/${seed}_cpu5_clk) / $pre") > "/dev/shm/${seed}_cpu5_clk_f"
    adb -s ${DEVICE_SERIAL} shell cat /sys/class/thermal/thermal_zone9/temp | awk '{ printf "%.1f°C", ($1 / 1000) }' > "/dev/shm/${seed}_cpu5_temp"
    get_cpu_load 'cpu5' "/dev/shm/${seed}_cpu5_prevload" "/dev/shm/${seed}_cpu5_load"
    
    adb -s ${DEVICE_SERIAL} shell cat ${target_cpu_debug_path}/cpu6/cpufreq/scaling_cur_freq | tr -d '\r\n' > "/dev/shm/${seed}_cpu6_clk"
    echo $(bc <<< "scale=$scale; $(< /dev/shm/${seed}_cpu6_clk) / $pre") > "/dev/shm/${seed}_cpu6_clk_f"
    adb -s ${DEVICE_SERIAL} shell cat /sys/class/thermal/thermal_zone10/temp | awk '{ printf "%.1f°C", ($1 / 1000) }' > "/dev/shm/${seed}_cpu6_temp"
    get_cpu_load 'cpu6' "/dev/shm/${seed}_cpu6_prevload" "/dev/shm/${seed}_cpu6_load"

    # Kyro 585 Silver @ 1.80GHz
    adb -s ${DEVICE_SERIAL} shell cat ${target_cpu_debug_path}/cpu0/cpufreq/scaling_cur_freq | tr -d '\r\n' > "/dev/shm/${seed}_cpu0_clk"
    echo $(bc <<< "scale=$scale; $(< /dev/shm/${seed}_cpu0_clk) / $pre") > "/dev/shm/${seed}_cpu0_clk_f"
    adb -s ${DEVICE_SERIAL} shell cat /sys/class/thermal/thermal_zone1/temp | awk '{ printf "%.1f°C", ($1 / 1000) }' > "/dev/shm/${seed}_cpu0_temp"
    get_cpu_load 'cpu0' "/dev/shm/${seed}_cpu0_prevload" "/dev/shm/${seed}_cpu0_load"

    adb -s ${DEVICE_SERIAL} shell cat ${target_cpu_debug_path}/cpu1/cpufreq/scaling_cur_freq | tr -d '\r\n' > "/dev/shm/${seed}_cpu1_clk"
    echo $(bc <<< "scale=$scale; $(< /dev/shm/${seed}_cpu1_clk) / $pre") > "/dev/shm/${seed}_cpu1_clk_f"
    adb -s ${DEVICE_SERIAL} shell cat /sys/class/thermal/thermal_zone2/temp | awk '{ printf "%.1f°C", ($1 / 1000) }' > "/dev/shm/${seed}_cpu1_temp"
    get_cpu_load 'cpu1' "/dev/shm/${seed}_cpu1_prevload" "/dev/shm/${seed}_cpu1_load"

    adb -s ${DEVICE_SERIAL} shell cat ${target_cpu_debug_path}/cpu2/cpufreq/scaling_cur_freq | tr -d '\r\n' > "/dev/shm/${seed}_cpu2_clk"
    echo $(bc <<< "scale=$scale; $(< /dev/shm/${seed}_cpu2_clk) / $pre") > "/dev/shm/${seed}_cpu2_clk_f"
    adb -s ${DEVICE_SERIAL} shell cat /sys/class/thermal/thermal_zone3/temp | awk '{ printf "%.1f°C", ($1 / 1000) }' > "/dev/shm/${seed}_cpu2_temp"
    get_cpu_load 'cpu2' "/dev/shm/${seed}_cpu2_prevload" "/dev/shm/${seed}_cpu2_load"

    adb -s ${DEVICE_SERIAL} shell cat ${target_cpu_debug_path}/cpu3/cpufreq/scaling_cur_freq | tr -d '\r\n' > "/dev/shm/${seed}_cpu3_clk"
    echo $(bc <<< "scale=$scale; $(< /dev/shm/${seed}_cpu3_clk) / $pre") > "/dev/shm/${seed}_cpu3_clk_f"
    adb -s ${DEVICE_SERIAL} shell cat /sys/class/thermal/thermal_zone4/temp | awk '{ printf "%.1f°C", ($1 / 1000) }' > "/dev/shm/${seed}_cpu3_temp"
    get_cpu_load 'cpu3' "/dev/shm/${seed}_cpu3_prevload" "/dev/shm/${seed}_cpu3_load"
}

function get_qrb5165_npu_clk() {
    scale=2
    pre=1000000

    # Core
    adb -s ${DEVICE_SERIAL} shell cat /sys/kernel/debug/clk/npu_cc_core_clk/clk_measure | tr -d '\r\n' > "/dev/shm/${seed}_npu_clk"
    echo $(bc <<< "scale=$scale; $(< /dev/shm/${seed}_npu_clk) / $pre") > "/dev/shm/${seed}_npu_clk_f"

    # Control Processor
    adb -s ${DEVICE_SERIAL} shell cat /sys/kernel/debug/clk/npu_cc_core_clk/clk_measure | tr -d '\r\n' > "/dev/shm/${seed}_npu_cp_clk"
    echo $(bc <<< "scale=$scale; $(< /dev/shm/${seed}_npu_cp_clk) / $pre") > "/dev/shm/${seed}_npu_cp_clk_f"
    adb -s ${DEVICE_SERIAL} shell cat /sys/kernel/debug/clk/npu_cc_core_clk/clk_rate | tr -d '\r\n' > "/dev/shm/${seed}_npu_cp_rate"
    echo $(bc <<< "scale=$scale; $(< /dev/shm/${seed}_npu_cp_rate) / $pre") > "/dev/shm/${seed}_npu_cp_rate_f"

    # Data Plan Engine (DP)
    adb -s ${DEVICE_SERIAL} shell cat /sys/kernel/debug/clk/npu_cc_cal_hm0_clk/clk_measure | tr -d '\r\n' > "/dev/shm/${seed}_npu_dp0_clk"
    echo $(bc <<< "scale=$scale; $(< /dev/shm/${seed}_npu_dp0_clk) / $pre") > "/dev/shm/${seed}_npu_dp0_clk_f"
    adb -s ${DEVICE_SERIAL} shell cat /sys/kernel/debug/clk/npu_cc_cal_hm0_clk/clk_rate | tr -d '\r\n' > "/dev/shm/${seed}_npu_dp0_rate"
    echo $(bc <<< "scale=$scale; $(< /dev/shm/${seed}_npu_dp0_rate) / $pre") > "/dev/shm/${seed}_npu_dp0_rate_f"
    adb -s ${DEVICE_SERIAL} shell cat /sys/kernel/debug/clk/npu_cc_cal_hm1_clk/clk_measure | tr -d '\r\n' > "/dev/shm/${seed}_npu_dp1_clk"
    echo $(bc <<< "scale=$scale; $(< /dev/shm/${seed}_npu_dp1_clk) / $pre") > "/dev/shm/${seed}_npu_dp1_clk_f"
    adb -s ${DEVICE_SERIAL} shell cat /sys/kernel/debug/clk/npu_cc_cal_hm1_clk/clk_rate | tr -d '\r\n' > "/dev/shm/${seed}_npu_dp1_rate"
    echo $(bc <<< "scale=$scale; $(< /dev/shm/${seed}_npu_dp1_rate) / $pre") > "/dev/shm/${seed}_npu_dp1_rate_f"

    # Power Level
    adb -s ${DEVICE_SERIAL} shell cat /sys/kernel/debug/npu/pwr_level | tr -d '\r\n' > "/dev/shm/${seed}_npu_pwr_level"

    # DSP
    adb -s ${DEVICE_SERIAL} shell cat /sys/kernel/debug/clk/npu_cc_dsp_axi_clk/clk_measure | tr -d '\r\n' > "/dev/shm/${seed}_npu_dsp_axi_clk"
    echo $(bc <<< "scale=$scale; $(< /dev/shm/${seed}_npu_dsp_axi_clk) / $pre") > "/dev/shm/${seed}_npu_dsp_axi_clk_f"
    adb -s ${DEVICE_SERIAL} shell cat /sys/kernel/debug/clk/npu_cc_dsp_ahbm_clk/clk_measure | tr -d '\r\n' > "/dev/shm/${seed}_npu_dsp_ahbm_clk"
    echo $(bc <<< "scale=$scale; $(< /dev/shm/${seed}_npu_dsp_ahbm_clk) / $pre") > "/dev/shm/${seed}_npu_dsp_ahbm_clk_f"
    adb -s ${DEVICE_SERIAL} shell cat /sys/kernel/debug/clk/npu_cc_dsp_ahbs_clk/clk_measure | tr -d '\r\n' > "/dev/shm/${seed}_npu_dsp_ahbs_clk"
    echo $(bc <<< "scale=$scale; $(< /dev/shm/${seed}_npu_dsp_ahbs_clk) / $pre") > "/dev/shm/${seed}_npu_dsp_ahbs_clk_f"

    # NoC
    adb -s ${DEVICE_SERIAL} shell cat /sys/kernel/debug/clk/npu_cc_noc_ahb_clk/clk_measure | tr -d '\r\n' > "/dev/shm/${seed}_npu_noc_ahb_clk"
    echo $(bc <<< "scale=$scale; $(< /dev/shm/${seed}_npu_noc_ahb_clk) / $pre") > "/dev/shm/${seed}_npu_noc_ahb_clk_f"
    adb -s ${DEVICE_SERIAL} shell cat /sys/kernel/debug/clk/npu_cc_noc_axi_clk/clk_measure | tr -d '\r\n' > "/dev/shm/${seed}_npu_noc_axi_clk"
    echo $(bc <<< "scale=$scale; $(< /dev/shm/${seed}_npu_noc_axi_clk) / $pre") > "/dev/shm/${seed}_npu_noc_axi_clk_f"
    adb -s ${DEVICE_SERIAL} shell cat /sys/kernel/debug/clk/npu_cc_noc_dma_clk/clk_measure | tr -d '\r\n' > "/dev/shm/${seed}_npu_noc_dma_clk"
    echo $(bc <<< "scale=$scale; $(< /dev/shm/${seed}_npu_noc_dma_clk) / $pre") > "/dev/shm/${seed}_npu_noc_dma_clk_f"

    # Sensor
    adb -s ${DEVICE_SERIAL} shell cat /sys/class/thermal/thermal_zone23/temp | awk '{ printf "%.1f°C", ($1 / 1000) }' > "/dev/shm/${seed}_npu_temp"
}

function get_qrb5165_cdsp_clk() {

    # sysMonApp

    # SNoC: System Network on Chip
    # BIMC: Bus Integrated Memory Controller
    # MemNoc: Memory Network on Chip

    lines=$(adb -s ${DEVICE_SERIAL} shell /data/sysMonApp getstate --q6 cdsp)
    while read -r line
    do
        if [[ $line == *"DSP Core clock"* ]]; then
            echo ${line#*:} | tr -d '\r\n' > "/dev/shm/${seed}_cdsp_clk"
        fi
        if [[ $line == *"SNOC Vote"* ]]; then
            echo ${line#*:} | tr -d '\r\n' > "/dev/shm/${seed}_cdsp_snoc_rate"
        fi
        if [[ $line == *"MEMNOC Vote"* ]]; then
            echo ${line#*:} | tr -d '\r\n' > "/dev/shm/${seed}_cdsp_memnoc_rate"
        fi
        if [[ $line == *"Measured SNOC"* ]]; then
            echo ${line#*:} | tr -d '\r\n' > "/dev/shm/${seed}_cdsp_snoc_clk"
        fi
        if [[ $line == *"Measured BIMC"* ]]; then
            echo ${line#*:} | tr -d '\r\n' > "/dev/shm/${seed}_cdsp_bimc_clk"
        fi

    done <<< "$lines"

    adb -s ${DEVICE_SERIAL} shell cat /sys/class/thermal/thermal_zone22/temp | awk '{ printf "%.1f°C", ($1 / 1000) }'  > "/dev/shm/${seed}_cdsp_temp"

}

function get_qrb5165_gpu_clk() {
    scale=2
    pre=1000000

    adb -s ${DEVICE_SERIAL} shell cat /sys/kernel/debug/clk/measure_only_gpu_cc_gx_gfx3d_clk/clk_measure | tr -d '\r\n' > "/dev/shm/${seed}_gpu_clk"
    echo $(bc <<< "scale=$scale; $(< /dev/shm/${seed}_gpu_clk) / $pre") > "/dev/shm/${seed}_gpu_clk_f"

    # GPU busy rate = (Active time per frame / Total time per frame) * 100
    adb -s ${DEVICE_SERIAL} shell cat /sys/class/kgsl/kgsl-3d0/gpu_busy_percentage | tr -d ' %\r\n' > "/dev/shm/${seed}_gpu_busy"

    adb -s ${DEVICE_SERIAL} shell cat /sys/class/kgsl/kgsl-3d0/devfreq/governor | tr -d '\r\n' > "/dev/shm/${seed}_gpu_gov"
    adb -s ${DEVICE_SERIAL} shell cat /sys/class/kgsl/kgsl-3d0/devfreq/gpu_load | tr -d '\r\n' > "/dev/shm/${seed}_gpu_load"
    adb -s ${DEVICE_SERIAL} shell cat /sys/class/thermal/thermal_zone24/temp | awk '{ printf "%.1f°C", ($1 / 1000) }' > "/dev/shm/${seed}_gpu_temp"

}

function get_qrb5165_vpu_clk() {
    scale=2
    pre=100000

    adb -s ${DEVICE_SERIAL} shell cat /sys/kernel/debug/clk/video_cc_mvs0_clk/clk_measure | tr -d '\r\n' > "/dev/shm/${seed}_vpu_mvs0"
    echo $(bc <<< "scale=$scale; $(< /dev/shm/${seed}_vpu_mvs0) / $pre") > "/dev/shm/${seed}_vpu_mvs0_f"
    adb -s ${DEVICE_SERIAL} shell cat /sys/kernel/debug/clk/video_cc_mvs0c_clk/clk_measure | tr -d '\r\n' > "/dev/shm/${seed}_vpu_mvs0c"
    echo $(bc <<< "scale=$scale; $(< /dev/shm/${seed}_vpu_mvs0c) / $pre") > "/dev/shm/${seed}_vpu_mvs0c_f"
    adb -s ${DEVICE_SERIAL} shell cat /sys/kernel/debug/clk/video_cc_mvs1_clk/clk_measure | tr -d '\r\n' > "/dev/shm/${seed}_vpu_mvs1"
    echo $(bc <<< "scale=$scale; $(< /dev/shm/${seed}_vpu_mvs1) / $pre") > "/dev/shm/${seed}_vpu_mvs1_f"
    adb -s ${DEVICE_SERIAL} shell cat /sys/kernel/debug/clk/video_cc_mvs1c_clk/clk_measure | tr -d '\r\n' > "/dev/shm/${seed}_vpu_mvs1c"
    echo $(bc <<< "scale=$scale; $(< /dev/shm/${seed}_vpu_mvs1c) / $pre") > "/dev/shm/${seed}_vpu_mvs1c_f"
}

function get_disk_usage() {
    adb -s ${DEVICE_SERIAL} shell echo '$(df -h --output=size /)' | tr -d 'Size ' | tr -d '\r\n' > "/dev/shm/${seed}_root_size"
    adb -s ${DEVICE_SERIAL} shell echo '$(df -h --output=used /)' | tr -d 'Used ' | tr -d '\r\n' > "/dev/shm/${seed}_root_used"
    adb -s ${DEVICE_SERIAL} shell echo '$(df -h --output=avail /) '| tr -d 'Avail ' | tr -d '\r\n' > "/dev/shm/${seed}_root_avaliable"
    adb -s ${DEVICE_SERIAL} shell echo '$(df --output=pcent /)' | tr -d 'Use% ' | tr -d '\r\n' > "/dev/shm/${seed}_root_usage"
}

function get_system_info() {
    adb -s ${DEVICE_SERIAL} shell lsb_release -d | sed 's/\r\n//g' | sed 's/Description:\t//g' > "/dev/shm/${seed}_os"
    adb -s ${DEVICE_SERIAL} shell uname -r | tr -d '\r\n' > "/dev/shm/${seed}_kernel_ver"
    adb -s ${DEVICE_SERIAL} shell cat /sys/bus/soc/devices/soc0/serial_number | awk '{ printf "0x%x", $1 }'| tr -d '\r\n' > "/dev/shm/${seed}_sn"
    adb -s ${DEVICE_SERIAL} shell "[ -f /usr/lib/rfsa/adsp/testsig-$(< /dev/shm/${seed}_sn).so ] && echo 'Installed' || echo 'Not Installed'" | tr -d '\r\n' > "/dev/shm/${seed}_testsig"
}

function get_network_info() {
    adb -s ${DEVICE_SERIAL} shell ifconfig eth0 | grep "inet " | awk '{print $2}' | tr -d '\r\n' > "/dev/shm/${seed}_ip"
    adb -s ${DEVICE_SERIAL} shell hostname | tr -d '\r\n' > "/dev/shm/${seed}_hostname"
    adb -s ${DEVICE_SERIAL} shell iwgetid -r | tr -d '\r\n' > "/dev/shm/${seed}_ssid"
}

function get_top_process() {
    adb -s ${DEVICE_SERIAL} shell ps ax -o pid,rss,pcpu,ucmd --sort=-pcpu,-rss | tail -n +2 | sed -n "$1,$2 p" | awk '{printf "%s,%s,%.2fMB,%s%%\n" , $1, $4, $2/1024, $3 }' > "/dev/shm/${seed}_top"
}

function get_logcat_last_lines() {
    lines=5
    adb -s ${DEVICE_SERIAL} logcat -d -t $lines | tail -n +2 > "/dev/shm/${seed}_logcat"
}

function get_uptime() {
    adb -s ${DEVICE_SERIAL} shell uptime | awk -F'( |,|:)+' '{print $6,"D",$8,"H",$9,"M"}' | tr -d '\r\n' > "/dev/shm/${seed}_uptime"
}

update_count=0
update(){

    [ $update_count -eq 0 ] && get_qrb5165_cpu_clk & 
    [ $update_count -eq 1 ] && get_qrb5165_cdsp_clk & 
    [ $update_count -eq 2 ] && get_qrb5165_npu_clk & 
    [ $update_count -eq 3 ] && get_qrb5165_gpu_clk & 
    [ $update_count -eq 3 ] && get_qrb5165_vpu_clk & 
    [ $update_count -eq 4 ] && get_disk_usage & 
    [ $update_count -eq 4 ] && get_network_info & 
    [ $update_count -eq 5 ] && get_uptime & 
    [ $update_count -eq 5 ] && get_top_process 1 5 & 
    [ $update_count -eq 6 ] && get_logcat_last_lines & 

    get_adb_devices & 
    if [ "$use_minidm" = true ]; 
    then 
        get_minidm_logs &
    fi

    [ $update_count -eq 6 ] && update_count=0 || ((update_count++))
    sleep 0.1
}

init

main() {
    
    update

    window "System Information" "green" "22%"
        append_tabbed "TIME,$(date '+%Y/%m/%d %T')" 2 ',' "yellow"
        append_tabbed "SEED:$seed" 2 ':' "yellow"
        addsep
        append_tabbed "ADB Serial,${DEVICE_SERIAL}" 2 ','
        append_tabbed "SoC Serial:$(< /dev/shm/${seed}_sn)" 2
        append_tabbed "TestSig:$(< /dev/shm/${seed}_testsig)" 2
        append_tabbed "Operating System:$(< /dev/shm/${seed}_os)" 2
        append_tabbed "Linux Kernel:$(< /dev/shm/${seed}_kernel_ver)" 2
        append_tabbed "Uptime:$(< /dev/shm/${seed}_uptime)" 2
    endwin

    window "Connected ADB Devices" "green" "22%"
        append_file "/dev/shm/${seed}_adb_devices.log"
    endwin

    window "Top 5 Process" "green" "22%"
        append_tabbed "PID:Process:Memory:CPU%" 4
        while IFS= read -r line
        do
            append_tabbed "$line" 4 "," "yellow"
        done < "/dev/shm/${seed}_top"
    endwin

    window "Network" "green" "14%"
        append_tabbed "IP:$(< /dev/shm/${seed}_ip)" 2
        append_tabbed "Hostname:$(< /dev/shm/${seed}_hostname)" 2
        append_tabbed "WIFI SSID:$(< /dev/shm/${seed}_ssid)" 2
        append_tabbed "WIFI RSSI:" 2
    endwin

    col_right
    window "Disk Usage" "green" "8%"
        append_tabbed "Size:$(< /dev/shm/${seed}_root_size)" 2
        append_tabbed "Used:$(< /dev/shm/${seed}_root_used)" 2
        append_tabbed "Avaliable:$(< /dev/shm/${seed}_root_avaliable)" 2
        vumeter "$(< /dev/shm/${seed}_root_usage)%" 9 $(< /dev/shm/${seed}_root_usage) 100 "green" "red" "white"
    endwin

    col_right
    move_up

    window "CPU (Kyro585) - $(< /dev/shm/${seed}_cpu_temp) - $(printf "%.1f%%" $(< /dev/shm/${seed}_cpu_load))" "green" "33%"
        append_tabbed ":Current:Min:Max:Temperature:Load" 6 ':' "white"
        append_tabbed "Prime  0:$(< /dev/shm/${seed}_cpu7_clk_f) GHz:$(< "/dev/shm/${seed}_cpu7_clk_min_f") GHz:$(< "/dev/shm/${seed}_cpu7_clk_max_f") GHz:$(< /dev/shm/${seed}_cpu7_temp):$(printf "%.1f%%" $(< /dev/shm/${seed}_cpu7_load))" 6 ':' "red"
        append_tabbed "Gold   0:$(< /dev/shm/${seed}_cpu4_clk_f) GHz:$(< "/dev/shm/${seed}_cpu4_clk_min_f") GHz:$(< "/dev/shm/${seed}_cpu4_clk_max_f") GHz:$(< /dev/shm/${seed}_cpu4_temp):$(printf "%.1f%%" $(< /dev/shm/${seed}_cpu4_load))" 6 ':' "yellow"
        append_tabbed "Gold   1:$(< /dev/shm/${seed}_cpu5_clk_f) GHz:$(< "/dev/shm/${seed}_cpu5_clk_min_f") GHz:$(< "/dev/shm/${seed}_cpu5_clk_max_f") GHz:$(< /dev/shm/${seed}_cpu5_temp):$(printf "%.1f%%" $(< /dev/shm/${seed}_cpu5_load))" 6 ':' "yellow"
        append_tabbed "Gold   2:$(< /dev/shm/${seed}_cpu6_clk_f) GHz:$(< "/dev/shm/${seed}_cpu6_clk_min_f") GHz:$(< "/dev/shm/${seed}_cpu6_clk_max_f") GHz:$(< /dev/shm/${seed}_cpu6_temp):$(printf "%.1f%%" $(< /dev/shm/${seed}_cpu6_load))" 6 ':' "yellow"
        append_tabbed "Silver 0:$(< /dev/shm/${seed}_cpu0_clk_f) GHz:$(< "/dev/shm/${seed}_cpu0_clk_min_f") GHz:$(< "/dev/shm/${seed}_cpu0_clk_max_f") GHz:$(< /dev/shm/${seed}_cpu0_temp):$(printf "%.1f%%" $(< /dev/shm/${seed}_cpu0_load))" 6 ':' "cyan"
        append_tabbed "Silver 1:$(< /dev/shm/${seed}_cpu1_clk_f) GHz:$(< "/dev/shm/${seed}_cpu1_clk_min_f") GHz:$(< "/dev/shm/${seed}_cpu1_clk_max_f") GHz:$(< /dev/shm/${seed}_cpu1_temp):$(printf "%.1f%%" $(< /dev/shm/${seed}_cpu1_load))" 6 ':' "cyan"
        append_tabbed "Silver 2:$(< /dev/shm/${seed}_cpu2_clk_f) GHz:$(< "/dev/shm/${seed}_cpu2_clk_min_f") GHz:$(< "/dev/shm/${seed}_cpu2_clk_max_f") GHz:$(< /dev/shm/${seed}_cpu2_temp):$(printf "%.1f%%" $(< /dev/shm/${seed}_cpu2_load))" 6 ':' "cyan"
        append_tabbed "Silver 3:$(< /dev/shm/${seed}_cpu3_clk_f) GHz:$(< "/dev/shm/${seed}_cpu3_clk_min_f") GHz:$(< "/dev/shm/${seed}_cpu3_clk_max_f") GHz:$(< /dev/shm/${seed}_cpu3_temp):$(printf "%.1f%%" $(< /dev/shm/${seed}_cpu3_load))" 6 ':' "cyan"
        addsep
        append "GPU (Adreno 650)" "center" "green"
        append_tabbed ":Current:Min:Max:Temperature:Busy" 6 ':' "white"
        append_tabbed "GPU:$(< /dev/shm/${seed}_gpu_clk_f) MHz:$(< "/dev/shm/${seed}_gpu_clk_min") MHz:$(< "/dev/shm/${seed}_gpu_clk_max_f") MHz:$(< /dev/shm/${seed}_gpu_temp):$(< /dev/shm/${seed}_gpu_busy)%" 6 ':' "yellow"
        addsep
        append "VPU (Adreno 655)" "center" "green"
        append_tabbed "MVS0 Current:MVS0C Current:MVS1 Current:MVS1C Current" 4 ':' "white"
        append_tabbed "$(< /dev/shm/${seed}_vpu_mvs0_f) MHz:$(< /dev/shm/${seed}_vpu_mvs0c_f) MHz:$(< /dev/shm/${seed}_vpu_mvs1_f) MHz:$(< /dev/shm/${seed}_vpu_mvs1c_f) MHz" 4 ':' "yellow"
        addsep
        append "Hexagon 698 DSP (V66 cDSP)" "center" "green"
        append_tabbed "Core Current:SNOC Current:BIMC Current:SNoC Voted:MEMNOC Voted:Temperature" 6 ':' "white"
        append_tabbed "$(< /dev/shm/${seed}_cdsp_clk):$(< /dev/shm/${seed}_cdsp_snoc_clk):$(< /dev/shm/${seed}_cdsp_bimc_clk):$(< /dev/shm/${seed}_cdsp_snoc_rate):$(< /dev/shm/${seed}_cdsp_memnoc_rate):$(< /dev/shm/${seed}_cdsp_temp)" 6 ':' "yellow"
        addsep
        append "NPU (HTA230)" "center" "green"
        append_tabbed ":Current:Voted:Temperature" 4 ':' "white"
        append_tabbed "Control Processor:$(< /dev/shm/${seed}_npu_cp_clk_f) Hz:$(< /dev/shm/${seed}_npu_cp_rate_f) Hz:$(< /dev/shm/${seed}_npu_temp)" 4 ':' "yellow"
        append_tabbed "DATA PLAN 0:$(< /dev/shm/${seed}_npu_dp0_clk_f) MHz:$(< /dev/shm/${seed}_npu_dp0_rate_f) MHz" 4 ':' "yellow"
        append_tabbed "DATA PLAN 1:$(< /dev/shm/${seed}_npu_dp1_clk_f) MHz:$(< /dev/shm/${seed}_npu_dp1_rate_f) MHz" 4 ':' "yellow"

        append_tabbed "DSP Bus:AXI:AHBM:AHBS" 4
        append_tabbed ":$(< /dev/shm/${seed}_npu_dsp_axi_clk_f) MHz:$(< /dev/shm/${seed}_npu_dsp_ahbm_clk_f) MHz:$(< /dev/shm/${seed}_npu_dsp_ahbs_clk_f) MHz" 4 ':' "yellow"
        append_tabbed "NoC Bus:AXI:AHB:DMA" 4
        append_tabbed ":$(< /dev/shm/${seed}_npu_noc_axi_clk_f) MHz:$(< /dev/shm/${seed}_npu_noc_ahb_clk_f) MHz:$(< /dev/shm/${seed}_npu_noc_dma_clk_f) MHz" 4 ':' "yellow"
    endwin

    window "GPU Frequency Meter" "green" "33%"
        vumeter "GPU $(< /dev/shm/${seed}_gpu_clk_f) MHz" 39 $(< /dev/shm/${seed}_gpu_clk) $(< /dev/shm/${seed}_gpu_clk_max) "green" "red" "white"
        addsep
        append "NPU Frequency Meter" "center" "green"
        addsep
        vumeter "DP0 $(< /dev/shm/${seed}_npu_dp0_clk_f) MHz" 50 $(< /dev/shm/${seed}_npu_dp0_clk) 1000000000 "green" "red" "white"
        vumeter "DP1 $(< /dev/shm/${seed}_npu_dp1_clk_f) MHz" 50 $(< /dev/shm/${seed}_npu_dp1_clk) 1000000000 "green" "red" "white"
    endwin

    window "CPU Big Freq. Meter" "green" "17%"
        vumeter "P0 $(< /dev/shm/${seed}_cpu7_clk_f) GHz" 20 $(< /dev/shm/${seed}_cpu7_clk) $(< /dev/shm/${seed}_cpu7_clk_max) "green" "red" "white"
        vumeter "G0 $(< /dev/shm/${seed}_cpu4_clk_f) GHz" 20 $(< /dev/shm/${seed}_cpu4_clk) $(< /dev/shm/${seed}_cpu4_clk_max) "green" "red" "white"
        vumeter "G1 $(< /dev/shm/${seed}_cpu5_clk_f) GHz" 20 $(< /dev/shm/${seed}_cpu5_clk) $(< /dev/shm/${seed}_cpu5_clk_max) "green" "red" "white"
        vumeter "G2 $(< /dev/shm/${seed}_cpu6_clk_f) GHz" 20 $(< /dev/shm/${seed}_cpu6_clk) $(< /dev/shm/${seed}_cpu6_clk_max) "green" "red" "white"
    endwin

    col_right
    window "CPU Little Freq. Meter" "green" "16%"
        vumeter "S0 $(< /dev/shm/${seed}_cpu0_clk_f) GHz" 18 $(< /dev/shm/${seed}_cpu0_clk) $(< /dev/shm/${seed}_cpu0_clk_max) "green" "red" "white"
        vumeter "S1 $(< /dev/shm/${seed}_cpu1_clk_f) GHz" 18 $(< /dev/shm/${seed}_cpu1_clk) $(< /dev/shm/${seed}_cpu1_clk_max) "green" "red" "white"
        vumeter "S2 $(< /dev/shm/${seed}_cpu2_clk_f) GHz" 18 $(< /dev/shm/${seed}_cpu2_clk) $(< /dev/shm/${seed}_cpu2_clk_max) "green" "red" "white"
        vumeter "S3 $(< /dev/shm/${seed}_cpu3_clk_f) GHz" 18 $(< /dev/shm/${seed}_cpu3_clk) $(< /dev/shm/${seed}_cpu3_clk_max) "green" "red" "white"
    endwin

    col_right
    move_up

    window "Logcat" "green" "45%"
        append_file "/dev/shm/${seed}_logcat"
    endwin

    if [ "$use_minidm" = true ] ;
    then
        window "mini-dm Status (usbport: $minidm_usbport)" "green" "45%"
            append_file /dev/shm/sample_qtop_minidm_status_$seed.log
            addsep
            append "mini-dm messages [/dev/shm/sample_qtop_minidm_log_lines_$seed.log]" "center" "green"
            addsep
            append_file /dev/shm/sample_qtop_minidm_log_lines_$seed.log
        endwin
    fi    
}

main_loop