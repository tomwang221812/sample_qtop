#!/bin/bash

export VERBOSE=1
source ./simple_curses.sh

which adb

export HEXAGON_ROOT=$HOME/Qualcomm/Hexagon_SDK/4.5.0.3
export MINIDM_PATH=${HEXAGON_ROOT}/tools/debug/mini-dm/Ubuntu18/mini-dm
export DEVICE_SERIAL=''

export target_cpu_debug_path='/sys/devices/system/cpu'
export use_minidm=false

export seed=$(echo $RANDOM | md5sum | head -c 20; echo | tr -d '\r\n')

function init() {
    clear
    echo '(II) Checking Hexagon root folder'
    if [ -d "$HEXAGON_ROOT" ];
    then
        echo "(II) $HEXAGON_ROOT directory exists."
    else
	    echo "(EE) $HEXAGON_ROOT directory does not exist."
        exit
    fi

    get_adb_device_as_options
    get_minidm_device_as_options

    echo '(**) Mount debug partition'
    adb -s ${DEVICE_SERIAL} wait-for-device root
    adb -s ${DEVICE_SERIAL} wait-for-device remount
    adb -s ${DEVICE_SERIAL} wait-for-device root
    adb -s ${DEVICE_SERIAL} shell mount -t debugfs none /sys/kernel/debug
    echo '(**) Debug mounted...'

    get_adb_devices
    get_qrb5165_cpu_clk_max
    get_qrb5165_cpu_clk_min
    get_cpu_load_init
    get_qrb5165_gpu_clk_max
    get_qrb5165_gpu_clk_min
    get_system_info

    if [ "$use_minidm" = true ] ; 
    then 
        get_minidm_devices
    fi
}

function get_adb_device_as_options() {
    echo ""
    echo "Choose which ADB device you want to connect"
    adb_device_no=1
    echo ""
    for line in $(adb devices | tail -n +2 | tr -d '\tdevices' | head --lines=-1); 
        do echo $((adb_device_no++))\) $line; 
    done
    echo "Q) Close the program"
    echo ""
    read -p ">>> Enter which device you want to connect [default=1]: " DEVICE_SERIAL
    
    if [ -z $DEVICE_SERIAL ]
    then
        DEVICE_SERIAL=1
    fi

    if [ $DEVICE_SERIAL = "Q" ] || [ $DEVICE_SERIAL = "q" ]
    then
        exit
    fi

    # Manually
    if [ $DEVICE_SERIAL -ge $adb_device_no ] || [ $DEVICE_SERIAL -lt 1 ]
    then
        echo You choose $DEVICE_SERIAL which is not in options...
        read -p ">>> Enter the serial manulally (Try [serial] or [ip]:[port]): " DEVICE_SERIAL
        return
    fi

    # OKay
    adb_device_no=1
    for line in $(adb devices | tail -n +2 | tr -d '\tdevices' | head --lines=-1); 
    do 
        if [ $DEVICE_SERIAL -eq $((adb_device_no++)) ]
        then
            echo "(II) You choose $DEVICE_SERIAL which is $line"
            export DEVICE_SERIAL=$line
            return
        fi
    done
}

function get_minidm_device_as_options() {

    if [[ $($MINIDM_PATH --devices | tail -n +4 | tr -d " " | tr -d '\r\n') ]];
    then
        echo '(II) Init mini-dm...'
        use_minidm=true
    else
        echo '(!!) No USB device connect to host'
        echo '(!!) mini-dm disabled!'
        return
    fi

    echo ""
    echo "Choose which mini-dm device you want to connect"
    minidm_device_no=1
    echo ""
    for line in $($MINIDM_PATH --devices | tail -n +4 | tr -d " "); 
    do 
        echo $((minidm_device_no++))\) ${line#*USBPort:}
    done
    echo "N) Do not use mini-dm"
    echo ""
    read -p ">>> Enter which device you want to connect [default=1]: " minidm_usbport
    
    if [ -z $minidm_usbport ]
    then
        minidm_usbport=1
    fi

    if [ $minidm_usbport = "N" ] || [ $minidm_usbport = "n" ]
    then
        use_minidm=false
        return
    fi

    # Manually
    if [ $minidm_usbport -ge $minidm_device_no ] || [ $minidm_usbport -lt 1 ]
    then
        echo "(II) You choose $minidm_usbport which is not in options..."
        read -p ">>> Enter the usbport manulally (Try [usbport no]]): " DEVICE_SERIAL
        return
    fi

    # OKay
    minidm_device_no=1
    for line in $($MINIDM_PATH --devices | tail -n +4 | tr -d " "); 
    do 
        if [ $minidm_usbport -eq $((minidm_device_no++)) ]
        then
            echo You choose $DEVICE_SERIAL which is $line
            export minidm_usbport=${line#*USBPort:}
            return
        fi
    done
}

function get_adb_devices() {
    adb devices | tail -n +2 | tr -d '\tdevices' | head --lines=-1 > /tmp/sample_qtop_adb_devices_$seed.log
}

function get_minidm_devices() {
    $MINIDM_PATH --devices | tail -n +4 > /tmp/sample_qtop_minidm_devices_$seed.log
    $MINIDM_PATH --usbport $minidm_usbport --msg-file /tmp/sample_qtop_minidm_$seed.log --filter_in "CDSP" > /tmp/sample_qtop_minidm_status_$seed.log &
}
trap 'trap - SIGTERM && kill 0' SIGINT SIGTERM EXIT

function get_minidm_logs() {
    lines=5
    tail -n$lines /tmp/sample_qtop_minidm_$seed.log > /tmp/sample_qtop_minidm_log_lines_$seed.log
}

function get_cpu_load_init() {
    export cpu_ss_prev_load=$(adb -s ${DEVICE_SERIAL} shell cat /proc/stat | grep 'cpu ' | awk '{printf "%d:%d:%d:%d:%d:%d:%d:%d:%d:%d", $2, $3, $4, $5, $6, $7, $8, $9, $10, $11}')
    export cpu0_prev_load=$(adb -s ${DEVICE_SERIAL} shell cat /proc/stat | grep 'cpu7' | awk '{printf "%d:%d:%d:%d:%d:%d:%d:%d:%d:%d", $2, $3, $4, $5, $6, $7, $8, $9, $10, $11}')
    export cpu1_prev_load=$(adb -s ${DEVICE_SERIAL} shell cat /proc/stat | grep 'cpu4' | awk '{printf "%d:%d:%d:%d:%d:%d:%d:%d:%d:%d", $2, $3, $4, $5, $6, $7, $8, $9, $10, $11}')
    export cpu2_prev_load=$(adb -s ${DEVICE_SERIAL} shell cat /proc/stat | grep 'cpu5' | awk '{printf "%d:%d:%d:%d:%d:%d:%d:%d:%d:%d", $2, $3, $4, $5, $6, $7, $8, $9, $10, $11}')
    export cpu3_prev_load=$(adb -s ${DEVICE_SERIAL} shell cat /proc/stat | grep 'cpu6' | awk '{printf "%d:%d:%d:%d:%d:%d:%d:%d:%d:%d", $2, $3, $4, $5, $6, $7, $8, $9, $10, $11}')
    export cpu4_prev_load=$(adb -s ${DEVICE_SERIAL} shell cat /proc/stat | grep 'cpu0' | awk '{printf "%d:%d:%d:%d:%d:%d:%d:%d:%d:%d", $2, $3, $4, $5, $6, $7, $8, $9, $10, $11}')
    export cpu5_prev_load=$(adb -s ${DEVICE_SERIAL} shell cat /proc/stat | grep 'cpu1' | awk '{printf "%d:%d:%d:%d:%d:%d:%d:%d:%d:%d", $2, $3, $4, $5, $6, $7, $8, $9, $10, $11}')
    export cpu6_prev_load=$(adb -s ${DEVICE_SERIAL} shell cat /proc/stat | grep 'cpu2' | awk '{printf "%d:%d:%d:%d:%d:%d:%d:%d:%d:%d", $2, $3, $4, $5, $6, $7, $8, $9, $10, $11}')
    export cpu7_prev_load=$(adb -s ${DEVICE_SERIAL} shell cat /proc/stat | grep 'cpu3' | awk '{printf "%d:%d:%d:%d:%d:%d:%d:%d:%d:%d", $2, $3, $4, $5, $6, $7, $8, $9, $10, $11}')
}

function get_qrb5165_cpu_clk_max() {

    scale=2
    pre=1000000

    # Kyro 585 Prime @ 2.84GHz
    export cpu_clk_cpu0_max=$(adb -s ${DEVICE_SERIAL} shell cat ${target_cpu_debug_path}/cpu7/cpufreq/scaling_max_freq | tr -d '\r\n')
    export cpu_clk_cpu0_max_format=$(bc <<< "scale=$scale; $cpu_clk_cpu0_max / $pre")

    # Kyro 585 Gold @ 2.42GHz
    export cpu_clk_cpu1_max=$(adb -s ${DEVICE_SERIAL} shell cat ${target_cpu_debug_path}/cpu4/cpufreq/scaling_max_freq | tr -d '\r\n')
    export cpu_clk_cpu1_max_format=$(bc <<< "scale=$scale; $cpu_clk_cpu1_max / $pre")

    export cpu_clk_cpu2_max=$(adb -s ${DEVICE_SERIAL} shell cat ${target_cpu_debug_path}/cpu5/cpufreq/scaling_max_freq | tr -d '\r\n')
    export cpu_clk_cpu2_max_format=$(bc <<< "scale=$scale; $cpu_clk_cpu2_max / $pre")

    export cpu_clk_cpu3_max=$(adb -s ${DEVICE_SERIAL} shell cat ${target_cpu_debug_path}/cpu6/cpufreq/scaling_max_freq | tr -d '\r\n')
    export cpu_clk_cpu3_max_format=$(bc <<< "scale=$scale; $cpu_clk_cpu3_max / $pre")

    # Kyro 585 Silver @ 1.80GHz
    export cpu_clk_cpu4_max=$(adb -s ${DEVICE_SERIAL} shell cat ${target_cpu_debug_path}/cpu0/cpufreq/scaling_max_freq | tr -d '\r\n')
    export cpu_clk_cpu4_max_format=$(bc <<< "scale=$scale; $cpu_clk_cpu4_max / $pre")

    export cpu_clk_cpu5_max=$(adb -s ${DEVICE_SERIAL} shell cat ${target_cpu_debug_path}/cpu1/cpufreq/scaling_max_freq | tr -d '\r\n')
    export cpu_clk_cpu5_max_format=$(bc <<< "scale=$scale; $cpu_clk_cpu5_max / $pre")

    export cpu_clk_cpu6_max=$(adb -s ${DEVICE_SERIAL} shell cat ${target_cpu_debug_path}/cpu2/cpufreq/scaling_max_freq | tr -d '\r\n')
    export cpu_clk_cpu6_max_format=$(bc <<< "scale=$scale; $cpu_clk_cpu6_max / $pre")

    export cpu_clk_cpu7_max=$(adb -s ${DEVICE_SERIAL} shell cat ${target_cpu_debug_path}/cpu3/cpufreq/scaling_max_freq | tr -d '\r\n')
    export cpu_clk_cpu7_max_format=$(bc <<< "scale=$scale; $cpu_clk_cpu7_max / $pre")

}

function get_qrb5165_cpu_clk_min() {

    scale=2
    pre=1000000

    # Kyro 585 Prime @ 2.84GHz
    export cpu_clk_cpu0_min=$(adb -s ${DEVICE_SERIAL} shell cat ${target_cpu_debug_path}/cpu7/cpufreq/scaling_min_freq | tr -d '\r\n')
    export cpu_clk_cpu0_min_format=$(bc <<< "scale=$scale; $cpu_clk_cpu0_min / $pre")

    # Kyro 585 Gold @ 2.42GHz
    export cpu_clk_cpu1_min=$(adb -s ${DEVICE_SERIAL} shell cat ${target_cpu_debug_path}/cpu4/cpufreq/scaling_min_freq | tr -d '\r\n')
    export cpu_clk_cpu1_min_format=$(bc <<< "scale=$scale; $cpu_clk_cpu1_min / $pre")
    export cpu_clk_cpu2_min=$(adb -s ${DEVICE_SERIAL} shell cat ${target_cpu_debug_path}/cpu5/cpufreq/scaling_min_freq | tr -d '\r\n')
    export cpu_clk_cpu2_min_format=$(bc <<< "scale=$scale; $cpu_clk_cpu2_min / $pre")
    export cpu_clk_cpu3_min=$(adb -s ${DEVICE_SERIAL} shell cat ${target_cpu_debug_path}/cpu6/cpufreq/scaling_min_freq | tr -d '\r\n')
    export cpu_clk_cpu3_min_format=$(bc <<< "scale=$scale; $cpu_clk_cpu3_min / $pre")

    # Kyro 585 Silver @ 1.80GHz
    export cpu_clk_cpu4_min=$(adb -s ${DEVICE_SERIAL} shell cat ${target_cpu_debug_path}/cpu0/cpufreq/scaling_min_freq | tr -d '\r\n')
    export cpu_clk_cpu4_min_format=$(bc <<< "scale=$scale; $cpu_clk_cpu4_min / $pre")
    export cpu_clk_cpu5_min=$(adb -s ${DEVICE_SERIAL} shell cat ${target_cpu_debug_path}/cpu1/cpufreq/scaling_min_freq | tr -d '\r\n')
    export cpu_clk_cpu5_min_format=$(bc <<< "scale=$scale; $cpu_clk_cpu5_min / $pre")
    export cpu_clk_cpu6_min=$(adb -s ${DEVICE_SERIAL} shell cat ${target_cpu_debug_path}/cpu2/cpufreq/scaling_min_freq | tr -d '\r\n')
    export cpu_clk_cpu6_min_format=$(bc <<< "scale=$scale; $cpu_clk_cpu6_min / $pre")
    export cpu_clk_cpu7_min=$(adb -s ${DEVICE_SERIAL} shell cat ${target_cpu_debug_path}/cpu3/cpufreq/scaling_min_freq | tr -d '\r\n')
    export cpu_clk_cpu7_min_format=$(bc <<< "scale=$scale; $cpu_clk_cpu7_min / $pre")

}

function get_qrb5165_gpu_clk_max() {

    scale=2
    pre=1000000

    export gpu_clk_opengl_core_max=$(adb -s ${DEVICE_SERIAL} shell cat /sys/class/kgsl/kgsl-3d0/max_gpuclk | tr -d '\r\n')
    export gpu_clk_opengl_core_max_format=$(bc <<< "scale=$scale; $gpu_clk_opengl_core_max / $pre")
}

function get_qrb5165_gpu_clk_min() {
    export gpu_clk_opengl_core_min=$(adb -s ${DEVICE_SERIAL} shell cat /sys/class/kgsl/kgsl-3d0/min_clock_mhz | tr -d '\r\n')
}

function get_cpu_load() {
    #     $1,   $2,   $3,     $4,   $5,     $6,  $7,       $8,          $9,   $10, $11
    # cpu{n}, user, nice, system, idle, iowait, irq, soft_irq, stealstolen, guest, guest_nice
    #           $2 +   $3 +      $4 +  $7 +       +8  +    $5 +     $6  +           $9 +   $10
    # Total = user + nice + (system + irq + soft_irq) + (idle + iowait) + (stealstolen + guest)
    # Load  = (user + system + nice + stealstolen + guest) / Total * 100.
    # Usage = Current_Load - Prev_Load

    curr_load=$(adb -s ${DEVICE_SERIAL} shell cat /proc/stat | grep "$1" | awk '{printf "%d:%d:%d:%d:%d:%d:%d:%d:%d:%d", $2, $3, $4, $5, $6, $7, $8, $9, $10, $11}')

    IFS=':' read -r user nice system idle iowait irq soft_irq stealstolen guest guest_nice <<< $curr_load
    IFS=':' read -r puser pnice psystem pidle piowait pirq psoft_irq pstealstolen pguest pguest_nice <<< $2
    
    curr_total=$(echo "$user+$nice+$system+$idle+$iowait+$irq+$soft_irq+$stealstolen+$guest" | bc)
    prev_total=$(echo "$puser+$pnice+$psystem+$pidle+$piowait+$pirq+$psoft_irq+$pstealstolen+$pguest" | bc)
    curr_use=$(echo "$user+$nice+$system+$irq+$soft_irq+$stealstolen+$guest" | bc)
    prev_use=$(echo "$puser+$pnice+$psystem+$pirq+$psoft_irq+$pstealstolen+$pguest" | bc)

    result=$(echo "scale=6; ($curr_use-$prev_use)/($curr_total-$prev_total)*100." | bc)
    prev_load=$curr_load
    
    echo "$result|$prev_load"
}

function get_qrb5165_cpu_clk() {
    scale=2
    pre=1000000

    # CPUSS
    export cpu_ss_temp=$(adb -s ${DEVICE_SERIAL} shell cat /sys/class/thermal/thermal_zone6/temp | awk '{ printf "%.1f°C", ($1 / 1000) }')
    IFS='|' read -r cpu_ss_load cpu_ss_prev_load <<< $(get_cpu_load 'cpu ' "$cpu_ss_prev_load")

    # Kyro 585 Prime @ 2.84GHz
    export cpu_clk_cpu0=$(adb -s ${DEVICE_SERIAL} shell cat ${target_cpu_debug_path}/cpu7/cpufreq/scaling_cur_freq | tr -d '\r\n')
    export cpu_clk_cpu0_format=$(bc <<< "scale=$scale; $cpu_clk_cpu0 / $pre")
    export cpu_clk_cpu0_temp=$(adb -s ${DEVICE_SERIAL} shell cat /sys/class/thermal/thermal_zone7/temp | awk '{ printf "%.1f°C", ($1 / 1000) }')
    IFS='|' read -r cpu0_load cpu0_prev_load <<< $(get_cpu_load 'cpu7' "$cpu0_prev_load")

    # Kyro 585 Gold @ 2.42GHz
    export cpu_clk_cpu1=$(adb -s ${DEVICE_SERIAL} shell cat ${target_cpu_debug_path}/cpu4/cpufreq/scaling_cur_freq | tr -d '\r\n')
    export cpu_clk_cpu1_format=$(bc <<< "scale=$scale; $cpu_clk_cpu1 / $pre")
    export cpu_clk_cpu1_temp=$(adb -s ${DEVICE_SERIAL} shell cat /sys/class/thermal/thermal_zone8/temp | awk '{ printf "%.1f°C", ($1 / 1000) }')
    IFS='|' read -r cpu1_load cpu1_prev_load <<< $(get_cpu_load 'cpu4' "$cpu1_prev_load")

    export cpu_clk_cpu2=$(adb -s ${DEVICE_SERIAL} shell cat ${target_cpu_debug_path}/cpu5/cpufreq/scaling_cur_freq | tr -d '\r\n')
    export cpu_clk_cpu2_format=$(bc <<< "scale=$scale; $cpu_clk_cpu2 / $pre")
    export cpu_clk_cpu2_temp=$(adb -s ${DEVICE_SERIAL} shell cat /sys/class/thermal/thermal_zone9/temp | awk '{ printf "%.1f°C", ($1 / 1000) }')
    IFS='|' read -r cpu2_load cpu2_prev_load <<< $(get_cpu_load 'cpu5' "$cpu2_prev_load")
    
    export cpu_clk_cpu3=$(adb -s ${DEVICE_SERIAL} shell cat ${target_cpu_debug_path}/cpu6/cpufreq/scaling_cur_freq | tr -d '\r\n')
    export cpu_clk_cpu3_format=$(bc <<< "scale=$scale; $cpu_clk_cpu3 / $pre")
    export cpu_clk_cpu3_temp=$(adb -s ${DEVICE_SERIAL} shell cat /sys/class/thermal/thermal_zone10/temp | awk '{ printf "%.1f°C", ($1 / 1000) }')
    IFS='|' read -r cpu3_load cpu3_prev_load <<< $(get_cpu_load 'cpu6' "$cpu3_prev_load")

    # Kyro 585 Silver @ 1.80GHz
    export cpu_clk_cpu4=$(adb -s ${DEVICE_SERIAL} shell cat ${target_cpu_debug_path}/cpu0/cpufreq/scaling_cur_freq | tr -d '\r\n')
    export cpu_clk_cpu4_format=$(bc <<< "scale=$scale; $cpu_clk_cpu4 / $pre")
    export cpu_clk_cpu4_temp=$(adb -s ${DEVICE_SERIAL} shell cat /sys/class/thermal/thermal_zone1/temp | awk '{ printf "%.1f°C", ($1 / 1000) }')
    IFS='|' read -r cpu4_load cpu4_prev_load <<< $(get_cpu_load 'cpu0' "$cpu4_prev_load")

    export cpu_clk_cpu5=$(adb -s ${DEVICE_SERIAL} shell cat ${target_cpu_debug_path}/cpu1/cpufreq/scaling_cur_freq | tr -d '\r\n')
    export cpu_clk_cpu5_format=$(bc <<< "scale=$scale; $cpu_clk_cpu5 / $pre")
    export cpu_clk_cpu5_temp=$(adb -s ${DEVICE_SERIAL} shell cat /sys/class/thermal/thermal_zone2/temp | awk '{ printf "%.1f°C", ($1 / 1000) }')
    IFS='|' read -r cpu5_load cpu5_prev_load <<< $(get_cpu_load 'cpu1' "$cpu5_prev_load")

    export cpu_clk_cpu6=$(adb -s ${DEVICE_SERIAL} shell cat ${target_cpu_debug_path}/cpu2/cpufreq/scaling_cur_freq | tr -d '\r\n')
    export cpu_clk_cpu6_format=$(bc <<< "scale=$scale; $cpu_clk_cpu6 / $pre")
    export cpu_clk_cpu6_temp=$(adb -s ${DEVICE_SERIAL} shell cat /sys/class/thermal/thermal_zone3/temp | awk '{ printf "%.1f°C", ($1 / 1000) }')
    IFS='|' read -r cpu6_load cpu6_prev_load <<< $(get_cpu_load 'cpu2' "$cpu6_prev_load")

    export cpu_clk_cpu7=$(adb -s ${DEVICE_SERIAL} shell cat ${target_cpu_debug_path}/cpu3/cpufreq/scaling_cur_freq | tr -d '\r\n')
    export cpu_clk_cpu7_format=$(bc <<< "scale=$scale; $cpu_clk_cpu7 / $pre")
    export cpu_clk_cpu7_temp=$(adb -s ${DEVICE_SERIAL} shell cat /sys/class/thermal/thermal_zone4/temp | awk '{ printf "%.1f°C", ($1 / 1000) }')
    IFS='|' read -r cpu7_load cpu7_prev_load <<< $(get_cpu_load 'cpu3' "$cpu7_prev_load")

}

function get_qrb5165_npu_clk() {
    scale=2
    pre=1000000

    # Core
    export npu_core_clk_curr=$(adb -s ${DEVICE_SERIAL} shell cat /sys/kernel/debug/clk/npu_cc_core_clk/clk_measure | tr -d '\r\n')
    export npu_core_clk_curr_format=$(bc <<< "scale=$scale; $npu_cp_clk_curr / $pre")

    # Control Processor
    export npu_cp_clk_curr=$(adb -s ${DEVICE_SERIAL} shell cat /sys/kernel/debug/clk/npu_cc_core_clk/clk_measure | tr -d '\r\n')
    export npu_cp_clk_curr_format=$(bc <<< "scale=$scale; $npu_cp_clk_curr / $pre")
    export npu_cp_clk_vote=$(adb -s ${DEVICE_SERIAL} shell cat /sys/kernel/debug/clk/npu_cc_core_clk/clk_rate | tr -d '\r\n')
    export npu_cp_clk_vote_format=$(bc <<< "scale=$scale; $npu_cp_clk_vote / $pre")

    # Data Plan Engine (DP)
    export npu_dp0_clk_curr=$(adb -s ${DEVICE_SERIAL} shell cat /sys/kernel/debug/clk/npu_cc_cal_hm0_clk/clk_measure | tr -d '\r\n')
    export npu_dp0_clk_curr_format=$(bc <<< "scale=$scale; $npu_dp0_clk_curr / $pre")
    export npu_dp0_clk_vote=$(adb -s ${DEVICE_SERIAL} shell cat /sys/kernel/debug/clk/npu_cc_cal_hm0_clk/clk_rate | tr -d '\r\n')
    export npu_dp0_clk_vote_format=$(bc <<< "scale=$scale; $npu_dp0_clk_vote / $pre")
    export npu_dp1_clk_curr=$(adb -s ${DEVICE_SERIAL} shell cat /sys/kernel/debug/clk/npu_cc_cal_hm1_clk/clk_measure | tr -d '\r\n')
    export npu_dp1_clk_curr_format=$(bc <<< "scale=$scale; $npu_dp1_clk_curr / $pre")
    export npu_dp1_clk_vote=$(adb -s ${DEVICE_SERIAL} shell cat /sys/kernel/debug/clk/npu_cc_cal_hm1_clk/clk_rate | tr -d '\r\n')
    export npu_dp1_clk_vote_format=$(bc <<< "scale=$scale; $npu_dp1_clk_vote / $pre")

    # Power Level
    export npu_power_level=$(adb -s ${DEVICE_SERIAL} shell cat /sys/kernel/debug/npu/pwr_level | tr -d '\r\n')

    # DSP
    export npu_dsp_axi_curr=$(adb -s ${DEVICE_SERIAL} shell cat /sys/kernel/debug/clk/npu_cc_dsp_axi_clk/clk_measure | tr -d '\r\n')
    export npu_dsp_axi_curr_format=$(bc <<< "scale=$scale; $npu_dsp_axi_curr / $pre")
    export npu_dsp_ahbm_curr=$(adb -s ${DEVICE_SERIAL} shell cat /sys/kernel/debug/clk/npu_cc_dsp_ahbm_clk/clk_measure | tr -d '\r\n')
    export npu_dsp_ahbm_curr_format=$(bc <<< "scale=$scale; $npu_dsp_ahbm_curr / $pre")
    export npu_dsp_ahbs_curr=$(adb -s ${DEVICE_SERIAL} shell cat /sys/kernel/debug/clk/npu_cc_dsp_ahbs_clk/clk_measure | tr -d '\r\n')
    export npu_dsp_ahbs_curr_format=$(bc <<< "scale=$scale; $npu_dsp_ahbs_curr / $pre")

    # NoC
    export npu_noc_ahb_curr=$(adb -s ${DEVICE_SERIAL} shell cat /sys/kernel/debug/clk/npu_cc_noc_ahb_clk/clk_measure | tr -d '\r\n')
    export npu_noc_ahb_curr_format=$(bc <<< "scale=$scale; $npu_dsp_axi_curr / $pre")
    export npu_noc_axi_curr=$(adb -s ${DEVICE_SERIAL} shell cat /sys/kernel/debug/clk/npu_cc_noc_axi_clk/clk_measure | tr -d '\r\n')
    export npu_noc_axi_curr_format=$(bc <<< "scale=$scale; $npu_dsp_ahbm_curr / $pre")
    export npu_noc_dma_curr=$(adb -s ${DEVICE_SERIAL} shell cat /sys/kernel/debug/clk/npu_cc_noc_dma_clk/clk_measure | tr -d '\r\n')
    export npu_noc_dma_curr_format=$(bc <<< "scale=$scale; $npu_dsp_ahbs_curr / $pre")

    # Sensor
    export npu_ss_temp=$(adb -s ${DEVICE_SERIAL} shell cat /sys/class/thermal/thermal_zone23/temp | awk '{ printf "%.1f°C", ($1 / 1000) }')
}

function get_qrb5165_cdsp_clk() {

    # sysMonApp

    # SNoC: System Network on Chip
    # BIMC: Bus Integrated Memory Controller
    # MemNoc: Memory Network on Chip

    export cdsp_clk_core='Empty'
    export cdsp_clk_snoc_vote='Empty'
    export cdsp_clk_snoc_curr='Empty'
    export cdsp_clk_memnoc_vote='Empty'
    export cdsp_clk_bimc_curr='Empty'

    lines=$(adb -s ${DEVICE_SERIAL} shell /data/sysMonApp getstate --q6 cdsp)
    while read -r line
    do
        if [[ $line == *"DSP Core clock"* ]]; then
            export cdsp_clk_core=$(echo ${line#*:} | tr -d '\r\n')
        fi
        if [[ $line == *"SNOC Vote"* ]]; then
            export cdsp_clk_snoc_vote_core=$(echo ${line#*:} | tr -d '\r\n')
        fi
        if [[ $line == *"MEMNOC Vote"* ]]; then
            export cdsp_clk_memnoc_vote=$(echo ${line#*:} | tr -d '\r\n')
        fi
        if [[ $line == *"Measured SNOC"* ]]; then
            export cdsp_clk_snoc_curr=$(echo ${line#*:} | tr -d '\r\n')
        fi
        if [[ $line == *"Measured BIMC"* ]]; then
            export cdsp_clk_bimc_curr=$(echo ${line#*:} | tr -d '\r\n')
        fi

    done <<< "$lines"

    export cdsp_ss_temp=$(adb -s ${DEVICE_SERIAL} shell cat /sys/class/thermal/thermal_zone22/temp | awk '{ printf "%.1f°C", ($1 / 1000) }')

    # /data/local/tmp/sysMonApp getPowerStats --q6 cdsp && sleep 300 && /data/local/tmp/sysMonApp getPowerStats --q6 cdsp &
}

function get_qrb5165_gpu_clk() {
    scale=2
    pre=1000000

    export gpu_clk_opengl_core_curr=$(adb -s ${DEVICE_SERIAL} shell cat /sys/kernel/debug/clk/measure_only_gpu_cc_gx_gfx3d_clk/clk_measure | tr -d '\r\n')
    export gpu_clk_opengl_core_curr_format=$(bc <<< "scale=$scale; $gpu_clk_opengl_core_curr / $pre")

    # GPU busy rate = (Active time per frame / Total time per frame) * 100
    export gpu_busy_percentage=$(adb -s ${DEVICE_SERIAL} shell cat /sys/class/kgsl/kgsl-3d0/gpu_busy_percentage| tr -d '\r\n')

    export gpu_governor=$(adb -s ${DEVICE_SERIAL} shell cat /sys/class/kgsl/kgsl-3d0/devfreq/governor | tr -d '\r\n')
    export gpu_load=$(adb -s ${DEVICE_SERIAL} shell cat /sys/class/kgsl/kgsl-3d0/devfreq/gpu_load | tr -d '\r\n')
    export gpu_ss_temp=$(adb -s ${DEVICE_SERIAL} shell cat /sys/class/thermal/thermal_zone24/temp | awk '{ printf "%.1f°C", ($1 / 1000) }')

}

function get_qrb5165_vpu_clk() {
    scale=2
    pre=100000

    export vpu_mvs0_clk_core_curr=$(adb -s ${DEVICE_SERIAL} shell cat /sys/kernel/debug/clk/video_cc_mvs0_clk/clk_measure | tr -d '\r\n')
    export vpu_mvs0_clk_core_curr_format=$(bc <<< "scale=$scale; $vpu_mvs0_clk_core_curr / $pre")
    export vpu_mvs0c_clk_core_curr=$(adb -s ${DEVICE_SERIAL} shell cat /sys/kernel/debug/clk/video_cc_mvs0c_clk/clk_measure | tr -d '\r\n')
    export vpu_mvs0c_clk_core_curr_format=$(bc <<< "scale=$scale; $vpu_mvs0c_clk_core_curr / $pre")
    export vpu_mvs1_clk_core_curr=$(adb -s ${DEVICE_SERIAL} shell cat /sys/kernel/debug/clk/video_cc_mvs1_clk/clk_measure | tr -d '\r\n')
    export vpu_mvs1_clk_core_curr_format=$(bc <<< "scale=$scale; $vpu_mvs1_clk_core_curr / $pre")
    export vpu_mvs1c_clk_core_curr=$(adb -s ${DEVICE_SERIAL} shell cat /sys/kernel/debug/clk/video_cc_mvs1c_clk/clk_measure | tr -d '\r\n')
    export vpu_mvs1c_clk_core_curr_format=$(bc <<< "scale=$scale; $vpu_mvs1c_clk_core_curr / $pre")
}

function get_disk_usage() {
    export disk_root_size=$(adb -s ${DEVICE_SERIAL} shell echo '$(df -h --output=size /)' | tr -d 'Size ' | tr -d '\r\n')
    export disk_root_used=$(adb -s ${DEVICE_SERIAL} shell echo '$(df -h --output=used /)' | tr -d 'Used ' | tr -d '\r\n')
    export disk_root_avaliable=$(adb -s ${DEVICE_SERIAL} shell echo '$(df -h --output=avail /) '| tr -d 'Avail ' | tr -d '\r\n')
    export disk_root_usage=$(adb -s ${DEVICE_SERIAL} shell echo '$(df --output=pcent /)' | tr -d 'Use% ' | tr -d '\r\n')
}

function get_system_info() {
    export os_description=$(adb -s ${DEVICE_SERIAL} shell lsb_release -d | tr -d 'Description:	' | tr -d '\r\n')
    export kernel_version=$(adb -s ${DEVICE_SERIAL} shell uname -r | tr -d '\r\n')
    export serial_number=$(adb -s ${DEVICE_SERIAL} shell cat /sys/bus/soc/devices/soc0/serial_number | awk '{ printf "0x%x", $1 }')
    export testsig_installed=$(adb -s ${DEVICE_SERIAL} shell [ -f /usr/lib/rfsa/adsp/testsig-$serial_number.so ] && printf "%s" 'Installed' || printf "%s" 'Not Install')
}

function get_network_info() {
    export hostname_ip=$(adb -s ${DEVICE_SERIAL} shell ifconfig eth0 | grep "inet " | awk '{print $2}' | tr -d '\r\n')
    export hostname=$(adb -s ${DEVICE_SERIAL} shell hostname | tr -d '\r\n')
    export iw_ssid=$(adb -s ${DEVICE_SERIAL} shell iwgetid -r | tr -d '\r\n')
}

function get_top_process() {
    lvar=$1
    top_process_result=$(adb -s ${DEVICE_SERIAL} shell ps ax -o pid,rss,pcpu,ucmd --sort=-cpu,-rss | sed -n "$lvar,$lvar p" | awk '{printf "%s: %sM:  %s%%" , $4, $2/1024, $3 }' | tr -d '\r\n')
    echo "$top_process_result"
}

function get_logcat_last_lines() {
    lines=5
    adb -s ${DEVICE_SERIAL} logcat -t $lines | tail -n +2 > /tmp/sample_qtop_adb_$seed.log
}

function get_uptime() {
    export uptime=$(adb -s ${DEVICE_SERIAL} shell uptime | awk -F'( |,|:)+' '{print $6,"D",$8,"H",$9,"M"}' | tr -d '\r\n')
}

init

main() {
    get_adb_devices
    get_qrb5165_cpu_clk
    get_qrb5165_cdsp_clk
    get_qrb5165_npu_clk
    get_qrb5165_gpu_clk
    get_qrb5165_vpu_clk
    get_disk_usage
    get_network_info
    get_logcat_last_lines
    get_uptime
    
    if [ "$use_minidm" = true ] ; 
    then 
        get_minidm_logs 
    fi

    window "System Information" "green" "22%"
        append_tabbed "TIME,$(date '+%Y/%m/%d %T')" 2 ',' "yellow"
        append_tabbed "SEED:$seed" 2 ':' "yellow"
        addsep
        append_tabbed "ADB Serial,$DEVICE_SERIAL" 2 ','
        append_tabbed "SoC Serial:$serial_number" 2
        append_tabbed "TestSig:$testsig_installed" 2
        append_tabbed "Operating System:$os_description" 2
        append_tabbed "Linux Kernel:$kernel_version" 2
        append_tabbed "Uptime:$uptime" 2
    endwin

    window "Connected ADB Devices" "green" "22%"
        append_file /tmp/sample_qtop_adb_devices_$seed.log
    endwin

    window "Top 5 Process" "green" "22%"
        for i in `seq 2 6`; do
            append_tabbed "$(($i-2)) $(get_top_process $i | tr -d '\r\n')" 3
        done
    endwin

    window "Network" "green" "14%"
        append_tabbed "IP:$hostname_ip" 2
        append_tabbed "Hostname:$hostname" 2
        append_tabbed "WIFI SSID:$iw_ssid" 2
        append_tabbed "WIFI RSSI:" 2
    endwin

    col_right
    window "Disk Usage" "green" "8%"
        append_tabbed "Size:$disk_root_size" 2
        append_tabbed "Used:$disk_root_used" 2
        append_tabbed "Avaliable:$disk_root_avaliable" 2
        vumeter "$disk_root_usage%" 9 $disk_root_usage 100 "green" "red" "white"
    endwin

    col_right
    move_up

    window "CPU (Kyro585) - $cpu_ss_temp - $(printf "%.1f%%" $cpu_ss_load)" "green" "33%"
        append_tabbed ":Current:Min:Max:Temperature:Load" 6 ':' "white"
        append_tabbed "Prime  0:$cpu_clk_cpu0_format GHz:$cpu_clk_cpu0_min_format GHz:$cpu_clk_cpu0_max_format GHz:$cpu_clk_cpu0_temp:$(printf "%.1f%%" $cpu0_load)" 6 ':' "red"
        append_tabbed "Gold   0:$cpu_clk_cpu1_format GHz:$cpu_clk_cpu1_min_format GHz:$cpu_clk_cpu1_max_format GHz:$cpu_clk_cpu1_temp:$(printf "%.1f%%" $cpu1_load)" 6 ':' "yellow"
        append_tabbed "Gold   1:$cpu_clk_cpu2_format GHz:$cpu_clk_cpu2_min_format GHz:$cpu_clk_cpu2_max_format GHz:$cpu_clk_cpu2_temp:$(printf "%.1f%%" $cpu2_load)" 6 ':' "yellow"
        append_tabbed "Gold   2:$cpu_clk_cpu3_format GHz:$cpu_clk_cpu3_min_format GHz:$cpu_clk_cpu3_max_format GHz:$cpu_clk_cpu3_temp:$(printf "%.1f%%" $cpu3_load)" 6 ':' "yellow"
        append_tabbed "Silver 0:$cpu_clk_cpu4_format GHz:$cpu_clk_cpu4_min_format GHz:$cpu_clk_cpu4_max_format GHz:$cpu_clk_cpu4_temp:$(printf "%.1f%%" $cpu4_load)" 6 ':' "cyan"
        append_tabbed "Silver 1:$cpu_clk_cpu5_format GHz:$cpu_clk_cpu5_min_format GHz:$cpu_clk_cpu5_max_format GHz:$cpu_clk_cpu5_temp:$(printf "%.1f%%" $cpu5_load)" 6 ':' "cyan"
        append_tabbed "Silver 2:$cpu_clk_cpu6_format GHz:$cpu_clk_cpu6_min_format GHz:$cpu_clk_cpu6_max_format GHz:$cpu_clk_cpu6_temp:$(printf "%.1f%%" $cpu6_load)" 6 ':' "cyan"
        append_tabbed "Silver 3:$cpu_clk_cpu7_format GHz:$cpu_clk_cpu7_min_format GHz:$cpu_clk_cpu7_max_format GHz:$cpu_clk_cpu7_temp:$(printf "%.1f%%" $cpu7_load)" 6 ':' "cyan"
        addsep
        append "GPU (Adreno 650)" "center" "green"
        append_tabbed ":Current:Min:Max:Temperature:Busy" 6 ':' "white"
        append_tabbed "GPU:$gpu_clk_opengl_core_curr_format MHz:$gpu_clk_opengl_core_min MHz:$gpu_clk_opengl_core_max_format MHz:$gpu_ss_temp:$gpu_busy_percentage" 6 ':' "yellow"
        addsep
        append "VPU (Adreno 655)" "center" "green"
        append_tabbed "MVS0 Current:MVS0C Current:MVS1 Current:MVS1C Current" 4 ':' "white"
        append_tabbed "$vpu_mvs0_clk_core_curr_format MHz:$vpu_mvs0c_clk_core_curr_format MHz:$vpu_mvs1_clk_core_curr_format MHz:$vpu_mvs1c_clk_core_curr_format MHz" 4 ':' "yellow"
        addsep
        append "Hexagon 698 DSP (V66 cDSP)" "center" "green"
        append_tabbed "Core Current:SNOC Current:BIMC Current:SNoC Voted:MEMNOC Voted:Temperature" 6 ':' "white"
        append_tabbed "$cdsp_clk_core:$cdsp_clk_snoc_curr:$cdsp_clk_bimc_curr:$cdsp_clk_snoc_vote_core:$cdsp_clk_memnoc_vote:$cdsp_ss_temp" 6 ':' "yellow"
        addsep
        append "NPU (HTA230)" "center" "green"
        append_tabbed ":Current:Voted:Temperature" 4 ':' "white"
        append_tabbed "Control Processor:$npu_cp_clk_curr_format Hz:$npu_cp_clk_vote_format Hz:$npu_ss_temp" 4 ':' "yellow"
        append_tabbed "DATA PLAN 0:$npu_dp0_clk_curr_format MHz:$npu_dp0_clk_vote_format MHz" 4 ':' "yellow"
        append_tabbed "DATA PLAN 1:$npu_dp1_clk_curr_format MHz:$npu_dp1_clk_vote_format MHz" 4 ':' "yellow"

        append_tabbed "DSP Bus:AXI:AHBM:AHBS" 4
        append_tabbed ":$npu_dsp_axi_curr_format MHz:$npu_dsp_ahbm_curr_format MHz:$npu_dsp_ahbs_curr_format MHz" 4 ':' "yellow"
        append_tabbed "NoC Bus:AXI:AHB:DMA" 4
        append_tabbed ":$npu_noc_axi_curr_format MHz:$npu_noc_ahb_curr_format MHz:$npu_noc_dma_curr_format MHz" 4 ':' "yellow"
    endwin

    window "GPU Frequency Meter" "green" "33%"
        vumeter "GPU $gpu_clk_opengl_core_curr_format MHz" 39 $gpu_clk_opengl_core_curr $gpu_clk_opengl_core_max "green" "red" "white"
        addsep
        append "NPU Frequency Meter" "center" "green"
        addsep
        vumeter "DP0 $npu_dp0_clk_curr_format MHz" 50 $npu_dp0_clk_curr 1000000000 "green" "red" "white"
        vumeter "DP1 $npu_dp1_clk_curr_format MHz" 50 $npu_dp1_clk_curr 1000000000 "green" "red" "white"
    endwin

    window "CPU Big Freq. Meter" "green" "17%"
        vumeter "P0 $cpu_clk_cpu0_format GHz" 20 $cpu_clk_cpu0 $cpu_clk_cpu0_max "green" "red" "white"
        vumeter "G0 $cpu_clk_cpu1_format GHz" 20 $cpu_clk_cpu1 $cpu_clk_cpu1_max "green" "red" "white"
        vumeter "G1 $cpu_clk_cpu2_format GHz" 20 $cpu_clk_cpu2 $cpu_clk_cpu2_max "green" "red" "white"
        vumeter "G2 $cpu_clk_cpu3_format GHz" 20 $cpu_clk_cpu3 $cpu_clk_cpu3_max "green" "red" "white"
    endwin

    col_right
    window "CPU Little Freq. Meter" "green" "16%"
        vumeter "S0 $cpu_clk_cpu4_format GHz" 18 $cpu_clk_cpu4 $cpu_clk_cpu4_max "green" "red" "white"
        vumeter "S1 $cpu_clk_cpu5_format GHz" 18 $cpu_clk_cpu5 $cpu_clk_cpu5_max "green" "red" "white"
        vumeter "S2 $cpu_clk_cpu6_format GHz" 18 $cpu_clk_cpu6 $cpu_clk_cpu6_max "green" "red" "white"
        vumeter "S3 $cpu_clk_cpu7_format GHz" 18 $cpu_clk_cpu7 $cpu_clk_cpu7_max "green" "red" "white"
    endwin

    col_right
    move_up

    window "Logcat" "green" "45%"
        append_file /tmp/sample_qtop_adb_$seed.log
    endwin

    if [ "$use_minidm" = true ] ;
    then
        window "mini-dm Status (usbport: $minidm_usbport)" "green" "45%"
            append_file /tmp/sample_qtop_minidm_status_$seed.log
            addsep
            append "mini-dm messages [/tmp/sample_qtop_minidm_log_lines_$seed.log]" "center" "green"
            addsep
            append_file /tmp/sample_qtop_minidm_log_lines_$seed.log
        endwin
    fi
    
}

main_loop -t 0.001